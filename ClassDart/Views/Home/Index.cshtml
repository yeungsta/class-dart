@model ClassDart.Models.HomeViewModel
           
@{
    ViewBag.Title = "Class Dart";
    string tempId;
    string tempId1; 
}

<div data-role="page" id="index_page" class="bodyBg">
	<div data-role="header">
        <div data-role="navbar" class="headerBar">
         <center>
          <h2>
              @if (Request.IsAuthenticated)
              {
                  <text>Dashboard</text>
              }
              else
              {
                  <text>Class Dart</text>
              }
          </h2>
         </center>
        </div>
	</div><!-- /header -->
		   
	<div data-role="content">
        @if (!Request.IsAuthenticated)
        {
        <br />

            <div data-role="collapsible" @if (ViewContext.ViewData.ModelState.Keys.Contains("Sign In Error")){ <text>data-collapsed="false"</text> } data-theme="b" data-content-theme="b" data-collapsed-icon="arrow-d" data-expanded-icon="arrow-u">

            <h4>Instructor Sign In</h4>

            <script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
            <script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

            @if (ViewContext.ViewData.ModelState.Keys.Contains("Sign In Error"))
            {
                @Html.ValidationSummary(true, "Oops! Login was unsuccessful. Please correct the error(s) and try again:");
                @Html.ValidationMessage("Sign In Error");
            }

            @using (Html.BeginForm())
            {
                <div style="padding:10px 20px;">
                    <fieldset>
                        <br />
                        <div class="editor-field">
                            @Html.TextBoxFor(m => m.SignInViewModel.UserName, new { data_theme = "c", placeholder = "Email" })
                            @Html.ValidationMessageFor(m => m.SignInViewModel.UserName)
                        </div>
                        <br />
                        <div class="editor-field">
                            @Html.PasswordFor(m => m.SignInViewModel.Password, new { data_theme = "c", placeholder = "Password" })
                            @Html.ValidationMessageFor(m => m.SignInViewModel.Password)
                        </div>
                        <br />
                        <div class="editor-label">
                            @Html.CheckBoxFor(m => m.SignInViewModel.RememberMe, new { data_theme = "a", @checked = "checked" })
                            @Html.LabelFor(m => m.SignInViewModel.RememberMe)
                        </div>
                        <p>
                            <input type="submit" value="Sign In" name="submitButton" data-theme="b" data-icon="check" />
                        </p>
                    </fieldset>
                </div>
            }
        </div>
        <br />
        <div data-role="collapsible" @if (ViewContext.ViewData.ModelState.Keys.Contains("New User Error"))
                                     { <text>data-collapsed="false"</text> } data-theme="b" data-content-theme="b" data-collapsed-icon="arrow-d" data-expanded-icon="arrow-u">
            <h4>New Instructor? Sign Up Free</h4>

            <script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
            <script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

            @if (ViewContext.ViewData.ModelState.Keys.Contains("New User Error"))
            {
                @Html.ValidationSummary(true, "Oops! Sign up was unsuccessful. Please correct the error(s) and try again:");
                @Html.ValidationMessage("New User Error");
            }

            <h4>Class Dart gives you the ability to create a mobile-friendly bulletin board (announcements/assignments) for your class. It's free!
            <p>Join our community of tech-savvy educators. Sign up now!</h4>

            @using (Html.BeginForm())
            {
                <div style="padding:10px 20px;">
                    <fieldset>
                        <div class="editor-field">
                            @Html.TextBoxFor(m => m.NewUserViewModel.FirstName, new { data_theme = "c", placeholder = "First name" })
                            @Html.ValidationMessageFor(m => m.NewUserViewModel.FirstName)
                        </div>
                        <br />
                        <div class="editor-field">
                            @Html.TextBoxFor(m => m.NewUserViewModel.LastName, new { data_theme = "c", placeholder = "Last name" })
                            @Html.ValidationMessageFor(m => m.NewUserViewModel.LastName)
                        </div>
                        <br />
                        <div class="editor-field">
                            @Html.TextBoxFor(m => m.NewUserViewModel.UserName, new { data_theme = "c", placeholder = "Email" })
                            @Html.ValidationMessageFor(m => m.NewUserViewModel.UserName)
                        </div>
                        <br />
                        <div class="editor-field">
                            @Html.PasswordFor(m => m.NewUserViewModel.Password, new { data_theme = "c", placeholder = "Password" })
                            @Html.ValidationMessageFor(m => m.NewUserViewModel.Password)
                        </div>
                        <br />
                        <p>
                            <input type="submit" value="Sign Up Free" name="submitButton" data-theme="b" data-icon="check" />
                        </p>
                    </fieldset>
                </div>
            }
        </div>
        }
        else
        {
            var classList = TempData["ClassList"] as List<ClassDart.Models.Class>;
            if ((classList != null) && (classList.Count() > 0))
            {
                <center>
		        <ul data-role="listview" data-inset="true" data-theme="c">
                    <li data-role="list-divider">Your Classes</li>
                    @foreach (var item in classList)
                    {
		                <li><a href="@Url.Action("Index", "Editor", new { id = item.ID }, null)" data-transition="slide">
			            <h2>@item.Name</h2>
		                </a></li>
                    }
		        </ul>
                </center>
            }
            else
            {
                <center>
                <h3>No classes exist yet.</h3>
                </center>
            }
            <br />
            <div data-role="collapsible" data-theme="b" data-content-theme="b" data-collapsed-icon="plus" data-expanded-icon="arrow-u">
                <h4>Create a Class</h4>

                <script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
                <script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

                @Html.ValidationSummary(true, "Create class was unsuccessful. Please correct the errors and try again.")

                @using (Html.BeginForm())
                {
                    <div style="padding:10px 20px;">
                        <fieldset>
                            <br />
                            <div class="editor-field">
                                @Html.TextBoxFor(m => m.CreateClassViewModel.ClassName, new { data_theme = "c", placeholder = "Name of class" })
                                @Html.ValidationMessageFor(m => m.CreateClassViewModel.ClassName)
                            </div>
                            <p>
                                <input type="submit" value="Create" name="submitButton" data-theme="b" data-icon="plus" />
                            </p>
                        </fieldset>
                    </div>
                }
            </div>

                if ((classList != null) && (classList.Count() > 0))
                {
                <br />
                <div data-role="collapsible" data-theme="b" data-content-theme="b" data-collapsed-icon="arrow-d" data-expanded-icon="arrow-u">
                <h4>Delete a Class</h4>                    
                <center>
                @for (int i = 0; i < classList.Count; i++)
                {
                    tempId = "#DeleteClassWarning" + i;

                    <a href="@tempId" data-rel="dialog" data-role="button" data-inline="true" data-icon="delete" data-theme="f" data-transition="none">@classList[i].Name</a>
                    <br /> 
                }
                </center>
                </div>               
                }
        }            
        <br />

        @if (!Request.IsAuthenticated)
        {
        <br />
        <center>
        <a href="http://www.classdart.com" data-role="button" data-inline="true" data-icon="home" data-theme="a">Regular Site</a></center>
        }
        <br />
	</div><!-- /content -->

	<div data-role="footer" data-position="fixed">
        @if (Request.IsAuthenticated)
        {
            <text><h3>You are signed in.&nbsp;&nbsp;&nbsp;&nbsp;<a href="@Url.Action("LogOff", "Account")" data-role="button" data-theme="e" data-mini="true">Log Off</a></h3>
            </text>
        }
        else
        {
            <text><h3>You are NOT signed in.</h3></text>            
        }
	</div><!-- /footer -->
</div><!-- /page -->

<!-- Delete Class warnings -->
@if (Request.IsAuthenticated)
{
    var classList = TempData["ClassList"] as List<ClassDart.Models.Class>;

    if ((classList != null) && (classList.Count() > 0))
    {
        for (int i = 0; i < classList.Count; i++)
        {
            tempId1 = "DeleteClassWarning" + i;

            <div data-role="page" id="@tempId1" data-overlay-theme="a" data-theme="c">
                <div data-role="header" data-theme="a" class="ui-corner-top">
                    <h1>Delete Class</h1>
                </div>
                <div data-role="content" data-theme="b" class="ui-corner-bottom ui-content">
                    <h3 class="ui-title">
                        Are you sure you want to delete @classList[i].Name?</h3>
                    <p>
                        This action will remove your entire class and all announcements/assignments in it! This move cannot be undone.</p>
                    <a href="#" data-role="button" data-icon="delete" data-theme="a" data-rel="back">Cancel</a>
                    <a data-role="button" data-icon="check" data-theme="b"  href="@Url.Action("DeleteClassConfirmed", "Home", new { id = classList[i].ID, index = i }, null)">
                        Delete</a>
                </div>
            </div>
        }
    }
}
